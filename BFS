///////////////////BFS-너비우선탐색///////////////////////////////

/*
#include <iostream>
#include <queue>

using namespace std;

int matrix[101][101];
int check[101][101];
int N;
int M;

int checking(int x, int y)
{
   if (x<1 || x>N || y<1 || y>M)//범위가 벗어나는지
      return 0;
   if (check[x][y] == 1)//방문한 곳인지
      return 0;
   if (matrix[x][y] == 0)//벽인지
      return 0;

   return 1;
}

void bfs(int a, int b)
{
   queue<int>Qx;
   queue<int>Qy;
   queue<int>Qcount;

   Qx.push(a);//시작점
   Qy.push(b);//시작점
   Qcount.push(1);
   int cnt = 0;


   while (!Qx.empty())
   {
      int cx = Qx.front();
      Qx.pop();

      int cy = Qy.front();
      Qy.pop();

      int cc = Qcount.front();
      Qcount.pop();

      check[cx][cy] = 1;

      if (cx == N && cy == M)
      {
         cnt = cc;
         break;
      }

      if (checking(cx-1, cy))
      {
         Qx.push(cx-1);
         Qy.push(cy);
         Qcount.push(cc + 1);
      }
         
      if (checking(cx+1, cy))
      {
         Qx.push(cx+1);
         Qy.push(cy);
         Qcount.push(cc + 1);
      }

      if (checking(cx, cy-1))
      {
         Qx.push(cx);
         Qy.push(cy-1);
         Qcount.push(cc + 1);
      }

      if (checking(cx, cy+1))
      {
         Qx.push(cx);
         Qy.push(cy+1);
         Qcount.push(cc + 1);
      }
   }
   
   cout << cnt;
}

int main()
{
   cin >> N >> M;

   for (int x = 1; x <= N; x++)
   {
      for (int y = 1; y <= M; y++)
      {
         int cur;
         cin >> cur;
         matrix[x][y] = cur;
      }
   }

   bfs(1, 1);
}
*/
